use kod;

CREATE TABLE MEMBER (
    MEMBER_ID VARCHAR(20) PRIMARY KEY,
    MEMBER_PW VARCHAR(30) NOT NULL,
    MEMBER_NAME VARCHAR(30) NOT NULL,
    MEMBER_PHONENUMBER VARCHAR(20) NOT NULL,
    MEMBER_EMAIL VARCHAR(30) NOT NULL,
    MEMBER_GRADE VARCHAR(20) NOT NULL,
    MEMBER_STATUS VARCHAR(20) NOT NULL,
    MEMBER_GENDER VARCHAR(20) NOT NULL,
    MEMBER_BIRTH VARCHAR(30) NOT NULL
);

CREATE TABLE CATEGORY (
   CATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT,
   CATEGORY_TYPE VARCHAR(20) NOT NULL
);

CREATE TABLE PRODUCT ( 
   PRODUCT_ID INT AUTO_INCREMENT PRIMARY KEY,
   PRODUCT_NAME VARCHAR(50) NOT NULL,
   PRODUCT_BRAND VARCHAR(30) NOT NULL,
   PRODUCT_PRICE INT NOT NULL,
   PRODUCT_INFO VARCHAR(500) NOT NULL,
   PRODUCT_STOCK INT NOT NULL,
   CATEGORY_ID INT,
   FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID)
);

CREATE TABLE IMAGE( 
   IMAGE_ID INT PRIMARY KEY AUTO_INCREMENT,
   PRODUCT_ID INT,
   FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
   REVIEW_ID INT,
   FOREIGN KEY (REVIEW_ID) REFERENCES REVIEW(REVIEW_ID),
   IMAGE_URL VARCHAR (500),
   IMAGE_CATEGORY VARCHAR (20)
);

CREATE TABLE WISHLIST (
   WISHLIST_ID INT PRIMARY KEY AUTO_INCREMENT,
   MEMBER_ID VARCHAR(30) NOT NULL,
   FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
   PRODUCT_ID INT NOT NULL,
   FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
   WISHLIST_ADDTIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ORDERLIST (
   ORDERLIST_ID INT PRIMARY KEY AUTO_INCREMENT,
   MEMBER_ID VARCHAR(30) NOT NULL,
   FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
   ORDERLIST_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ORDERCONTENT ( 
   ORDERCONTENT_ID INT PRIMARY KEY AUTO_INCREMENT,
   ORDERLIST_ID INT NOT NULL,
   FOREIGN KEY (ORDERLIST_ID) REFERENCES ORDERLIST(ORDERLIST_ID),
   PRODUCT_ID INT NOT NULL,
   FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
   ORDERCONTENT_CNT INT
);


CREATE TABLE ADDRESS ( 
   ADDRESS_ID INT AUTO_INCREMENT PRIMARY KEY,
   MEMBER_ID VARCHAR (30),
   FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
   ADDRESS_NAME VARCHAR (255) NOT NULL,
   ADDRESS_STREET VARCHAR (255) NOT NULL,
   ADDRESS_LAND VARCHAR (255) NOT NULL,
   ADDRESS_DETAIL VARCHAR (20),
   ADDRESS_ZIPCODE VARCHAR (20) NOT NULL
);


CREATE TABLE CART ( 
   CART_ID INT PRIMARY KEY AUTO_INCREMENT,
   MEMBER_ID VARCHAR(30) NOT NULL,
   FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
   PRODUCT_ID INT NOT NULL,
   FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
   CART_PRODUCT_CNT INT
);






CREATE TABLE REVIEW ( 
   REVIEW_ID INT PRIMARY KEY AUTO_INCREMENT,
   MEMBER_ID VARCHAR(30) NOT NULL,
   FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
   PRODUCT_ID INT NOT NULL,
   FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
   ORDERCONTENT_ID INT NOT NULL,
   FOREIGN KEY (ORDERCONTENT_ID) REFERENCES ORDERCONTENT(ORDERCONTENT_ID),
   REVIEW_TITLE VARCHAR(100) NOT NULL,
   REVIEW_CONTENT VARCHAR(500) NOT NULL,
   REVIEW_DATE TIMESTAMP,
   REVIEW_SCORE INT   
);

CREATE TABLE COUPON ( 
   COUPON_ID INT PRIMARY KEY AUTO_INCREMENT,
   COUPON_NAME VARCHAR(50) NOT NULL,
   COUPON_CONTENT VARCHAR(100) NOT NULL,
   COUPON_DISCOUNT_RATE INT  NOT NULL,
   COUPON_DISCOUNT_MAX_PRICE INT  NOT NULL,
   COUPON_CODE VARCHAR(50) NOT NULL,
   COUPON_USE_DATE DATE NOT NULL, 
   COUPON_TYPE VARCHAR(50) NOT NULL,
   COUPON_USE_MIN_PRICE INT NOT NULL
);

CREATE TABLE COUPON_STATUS (  
   COUPON_STATUS_ID INT PRIMARY KEY AUTO_INCREMENT,
   MEMBER_ID VARCHAR(30) NOT NULL,
   FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
   COUPON_ID INT NOT NULL,
   FOREIGN KEY (COUPON_ID) REFERENCES COUPON(COUPON_ID) ON DELETE CASCADE,
   COUPON_ISUSED VARCHAR(20) DEFAULT 'UNUSED_COUPON' NOT NULL,
   COUPON_START_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
   COUPON_EXPIRE_DATE TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + INTERVAL 30 DAY) NOT NULL
);

CREATE TABLE COUPON_CATEGORY (
   COUPON_CATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT,
   COUPON_ID INT NOT NULL,
   FOREIGN KEY (COUPON_ID) REFERENCES COUPON(COUPON_ID),
   CATEGORY_ID INT NOT NULL,
   FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID)
);


use kod;
select * from member;

SELECT MEMBER_ID,MEMBER_GRADE  FROM MEMBER  WHERE MEMBER_ID='admin' AND MEMBER_PW='123' ;


SELECT COUPON_ID,COUPON_CONTENT,COUPON_DISCOUNT_RATE,COUPON_DISCOUNT_MAX,COUPON_NAME,COUPON_CODE,COUPON_USE_DATE,COUPON_TYPE,COUPON_MIN_PRICE FROM coupon;
-- 현재 발급 가능한 쿠폰 전체 조회 --!
SELECT COUPON_ID,COUPON_CONTENT,COUPON_DISCOUNT_RATE,COUPON_DISCOUNT_MAX,COUPON_NAME,COUPON_CODE,COUPON_USE_DATE,COUPON_TYPE,COUPON_MIN_PRICE FROM coupon WHERE COUPON_ID = ?;
-- 특정 쿠폰 조회 --!
INSERT INTO COUPON(COUPON_CONTENT,COUPON_DISCOUNT_RATE,COUPON_DISCOUNT_MAX,COUPON_NAME,COUPON_CODE,COUPON_USE_DATE,COUPON_TYPE,COUPON_MIN_PRICE) VALUES('?',?,?,'?',FLOOR(RAND()* 100000000),'YYYY-MM-DD','?',?);
-- 쿠폰을 새로 만드는 쿼리 쿠폰코드 랜덤 난수 8자리 --!
INSERT INTO COUPON(COUPON_CONTENT,COUPON_DISCOUNT_RATE,COUPON_DISCOUNT_MAX,COUPON_NAME,COUPON_CODE,COUPON_USE_DATE,COUPON_TYPE,COUPON_MIN_PRICE) VALUES('1',1,1,'1',?,'2024-03-13','자동발행',3000);
-- 쿠폰 생성 쿠폰코드 직접입력 --
UPDATE COUPON SET COUPON_CONTENT ='?', COUPON_DISCOUNT_RATE =?,COUPON_DISCOUNT_MAX=?, COUPON_NAME='',COUPON_CODE =?, COUPON_USE_DATE ='',COUPON_TYPE='',COUPON_MIN_PRICE=? WHERE COUPON_ID =?;
-- 생성한 쿠폰 설정 변경 -- 
UPDATE COUPON SET COUPON_CONTENT ='반가워요', COUPON_DISCOUNT_RATE =20,COUPON_DISCOUNT_MAX=500, COUPON_NAME='서울',COUPON_CODE =123, COUPON_USE_DATE ='2024-03-15',COUPON_TYPE='자동발행',COUPON_MIN_PRICE=2000 WHERE COUPON_ID =5;

DELETE FROM COUPON WHERE COUPON_ID=?;
-- 쿠폰을 잘못 설정한 경우 삭제할 수 있는 쿼리(일반적으로는 쓸 일이 없지만 혹시나 하는 일) --







INSERT INTO COUPON_STATUS(MEMBER_ID,COUPON_ID) VALUES ('aaabbb',13); 
-- 사용자에게 쿠폰을 발급하는 로직 (만료일 디폴트값 사용) --!
INSERT INTO COUPON_STATUS(MEMBER_ID,COUPON_ID,COUPON_EXPIRE_DATE) VALUES ('?',?,'YYYY-MM-DD');
-- 사용자에게 쿠폰을 발급하는 로직 (만료일 따로 입력) --!
UPDATE COUPON_STATUS SET COUPON_ISUSED ='?' WHERE MEMBER_ID=? AND COUPON_ID =? AND COUPON_STATUS_ID = ?;  
-- 사용자가 쿠폰 사용하면 사용된 쿠폰 상태 변경 --!
UPDATE COUPON_STATUS SET COUPON_ISUSED ='USED_COUPON' WHERE MEMBER_ID='aaabbb' AND COUPON_ID =5 AND COUPON_STATUS_ID = 4;
UPDATE COUPON_STATUS SET COUPON_EXPIRE_DATE ='?' WHERE COUPON_ID=?; 
-- 특정쿠폰들 한번에 만료일 변경 --!
UPDATE COUPON_STATUS SET COUPON_EXPIRE_DATE ='?' WHERE COUPON_STATUS_ID =? AND MEMBER_ID='?';  
-- 사용자 개인별 쿠폰 만료일 변경 (필요한 경우) --!
SELECT COUPON_STATUS_ID,MEMBER_ID,COUPON_ID,COUPON_ISUSED,COUPON_START_DATE,COUPON_EXPIRE_DATE FROM COUPON_STATUS WHERE COUPON_ID=5 AND MEMBER_ID='aaabbb'; 
-- 해당 이름 쿠폰 전체조회 --!
SELECT COUPON_STATUS_ID,MEMBER_ID,COUPON_ID,COUPON_ISUSED,COUPON_START_DATE,COUPON_EXPIRE_DATE FROM COUPON_STATUS WHERE COUPON_STATUS_ID=?; 
-- 개별쿠폰조회 --!
DELETE FROM COUPON_STATUS WHERE COUPON_STATUS_ID=?;
-- 관리자의 실수로 쿠폰 발행이 잘못된 경우 삭제하는 로직 (개별) --!

DELETE FROM COUPON_STATUS WHERE COUPON_ID=?;
-- 관리자의 실수로 쿠폰 발행이 잘못된 경우 삭제하는 로직 (전체) --!



CREATE EVENT DELETE_EXPIRED_COUPONS ON SCHEDULE EVERY 1 DAY DO BEGIN 
   DELETE FROM COUPON_STATUS WHERE COUPON_EXPIRE_DATE < DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY);
END;
-- 만료된 쿠폰이 오늘 날짜로부터 7일이 지난 경우 삭제하는 이벤트 스케쥴러 (하루단위) --!

DROP EVENT IF EXISTS DELETE_EXPIRED_COUPONS;
-- 삭제 스케쥴러 off --!

CREATE EVENT UPDATE_COUPON_STATUS ON SCHEDULE EVERY 1 DAY DO BEGIN
    UPDATE COUPON_STATUS SET COUPON_ISUSED='EXPIRED_COUPON' WHERE COUPON_EXPIRE_DATE < NOW();
END;
-- 쿠폰 사용기한이 지난 쿠폰을 만료 상태로 변경하는 이벤트 스케쥴러 (하루단위) --!

DROP EVENT IF EXISTS UPDATE_COUPON_STATUS; 
-- 변경 스케쥴러 off --!





SELECT 
    C.COUPON_NAME,
    C.COUPON_DISCOUNT_RATE,
    C.COUPON_DISCOUNT_MAX,
    C.COUPON_MIN_PRICE,
    C.COUPON_CODE,
    CS.COUPON_START_DATE,
    CS.COUPON_EXPIRE_DATE,
    CG.CATEGORY_TYPE
FROM 
    SPRING.COUPON C
JOIN 
    SPRING.COUPON_STATUS CS ON C.COUPON_ID = CS.COUPON_ID
JOIN 
    SPRING.COUPON_CATEGORY CC ON C.COUPON_ID = CC.COUPON_ID
JOIN
   SPRING.CATEGORY CG ON CG.CATEGORY_ID=CC.CATEGORY_ID
WHERE CATEGORY_TYPE='ALL_PRODUCT';

-- 쿠폰이름,할인율,최대할인금액,최소적용금액,쿠폰코드,쿠폰발행일,만료일,쿠폰타입 중 특정 카테고리 조회 --!

SELECT 
    C.COUPON_NAME,
    C.COUPON_DISCOUNT_RATE,
    C.COUPON_DISCOUNT_MAX,
    C.COUPON_MIN_PRICE,
    C.COUPON_CODE,
    CS.COUPON_START_DATE,
    CS.COUPON_EXPIRE_DATE,
    CG.CATEGORY_TYPE
FROM 
    SPRING.COUPON C
JOIN 
    SPRING.COUPON_STATUS CS ON C.COUPON_ID = CS.COUPON_ID
JOIN 
    SPRING.COUPON_CATEGORY CC ON C.COUPON_ID = CC.COUPON_ID
JOIN
   SPRING.CATEGORY CG ON CG.CATEGORY_ID=CC.CATEGORY_ID;
-- 쿠폰이름,할인율,최대할인금액,최소적용금액,쿠폰코드,쿠폰발행일,만료일,쿠폰타입 전체 카테고리 조회 --!







